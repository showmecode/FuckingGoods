值传递方式：(c)
	把实参赋值给形参，形参实际得到的是实参的拷贝。相当于：
		先拷贝实参，再用实参的拷贝替换形参
	故在函数中操作的是实参的拷贝，不会改变实参的值
	
	传址方式其实就是传值方式，只不过传递的是地址而已
	把实参地址赋值给形参指针，相当于：
		先拷贝实参地址，再用实参地址的拷贝替换形参指针
	此时，形参指针指向实参
	操作形参指针(实参地址的拷贝)不会改变实参地址的值
	但是因为解引用操作可以改变指针指向的数据，
	故可以通过形参指针改变实参的值
	但注意，实参的地址并没有改变，因为操作的是实参地址的拷贝

什么是引用？
	引用就是某一变量(目标)的一个别名，对引用的操作与对变量的操作完全一致

	int a = 1;
	int &b = a;
	即b是a的引用，对的操作和对a的操作效果一样

		
引用传递方式：(c++)
	与址传递类似，相当于：
		直接用实参替换形参
	其实际的效果是令对应的引用形参在调用过程中
	作为一个变量名指向作为实参的这个变量(绑定在一起了，穿同一条裤衩)
	与赋值形参的不同在这里体现出来，在引用调用过程中并不创建新的参数变量

引用和指针的比较
(1)指针表示的是一个对象变量的地址,而引用则表示一个对象变量的别名
	引用类型变量与其他类型变量不同,它没有自己的值和地址空间,只是作为另一个变量
	的别名,在它的生存期期间两个名字绑定在一起,因此,引用类型的使用是有限制的:
	• 引用类型变量不能被引用
	• 引用类型不能组成数组
	• 引用类型不能定义指针

(2)指针是可变的,它可以指向变量 m,也可以指向变量 n,而引用变量只能在定义时
一次确定,不可改变



引用型参数的优点是:
(1)可以把函数外的变量以别名的形式引入到函数体内参加运算,非常方便,这种方式
比用指针解决这个问题更合理。
(2)不必在调用时创建与实参变量或对象对应的值的参数变量,当实参变量或对象占用
内存较多时,可以节省内存。
(3)用指针也可以实现类似于引用调用的效果,但由于指针可以改变内容,任意赋值,
因此它不如引用型参数安全。






















