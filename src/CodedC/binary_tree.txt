树的专业定义：
	有且只有一个根节点
	有若干个互不相加的子树，这些子树本身也是一颗树

通俗定义：
	树是由节点和边组成
	每个节点只有一个父节点但可以有多个子节点
	但是有一个节点例外，该节点没有父节点，此节点称为根节点

专业术语：
	节点		父节点		子节点
	子孙		堂兄弟	
		
	深度：
		从根节点到最底层节点的层数称之为深度
		跟节点是第一层
		
	叶子节点：
		没有子节点的节点
		
	非终端节点：
		实际就是非叶子节点
		
	根节点可以是叶子节点或者非叶子节点
	
	度：
		子节点的个数
	
树的分类：
	一般树：任意一个节点的子节点的个树都不受限制
	二叉树：任意一个子节点的个数最多两个，而且子节点的位置不可更改
	森 林： n个互不相交的树的集合  

二叉树的分类：
	一般二叉树
	满 二叉 树：每一层的节点数都是最大的二叉树
	完全二叉树：如果只是删除满二叉树最底层最右边的连续若干个节点，
				这样形成的二叉树就是完全二叉树
	
	满二叉树是完全二叉树的一个特例
	
树的存储：
	二叉树的存储
		连续存储[完全二叉树]
			优点：查找某个节点的子/夫节点的速度很快(包括判断是否有子/父节点)
			缺点：耗内存空间
		
		链式存储
		
	一般树的存储
		双亲表示法：每个节点存父节点的下标(指针)，故求父节点容易
		孩子表示法：每个节点存子节点的下标(指针),故求子节点容易
		双亲孩子表示法：每个节点存父节点和子节点的下标(指针)，
						求父节点和子节点都很容易
		二叉树表示法：把一个普通树转化成二叉树来存储。
			具体转换方法：设法保证任意一个节点左指针域指向它的第一个孩子
						  右指针域指向它的下一个兄弟，便可以把一个普通树转化为
						  二叉树
			一个普通树转化成的二叉树一定没有右子树
		
	森林的存储：先把森林转化为二叉树，再存储二叉树
	
二叉树的遍历：[递归思想]
	先序遍历：[先访问根节点]
			先访问根节点，再先序访问左子树，后先序访问右子树(根/左/右)
	中序遍历：[中间访问根节点]
			先中序遍历左子树，再访问根节点，后中序遍历右子树(左/根/右)
	后序遍历：[最后访问根节点]
			先后序遍历左子树，再后序遍历右子树，最后访问根节点(左/右/根)
			
已知先序和中序或者已知中序和后序可以推出原始二叉树
	方法：1.根据先序或者后序确定根节点
		  2.根据中序确定左右子树
		  3.左右子树分别递归这三步 
	
	先序：ABCDEFGH
	中序：BDCEAFHG
	后序：DECBHGFA
			A
		   / \            
		   B  F                   
		   \   \
		   C    G
		  / \   /
		 D   E  H

	先序：ABDGHCEFI
	中序：GDHBAECIF
	后序：GHDBEIFCA
			A
		   / \			
	       B  C
	      /  / \
	     D   E  F
	    / \     /
	    G  H    I

树的应用：
	树是数据库中数据组织的一种重要形式
	操作系统子父进程关系本身就是一颗树
	面向对象语言中类的继承关系
	赫夫曼树	
	
	
